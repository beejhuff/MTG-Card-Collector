export interface List<T> {
    data: T[];
    has_more: boolean;
    next_page: string | null;
    total_cards: string | null;
    warnings: string[];
}
export declare enum Color {
    W = 0,
    B = 1,
    R = 2,
    U = 3,
    G = 4,
}
export declare enum Layout {
    normal = 0,
    split = 1,
    flip = 2,
    transform = 3,
    meld = 4,
    leveler = 5,
    plane = 6,
    phenomenon = 7,
    scheme = 8,
    vanguard = 9,
    emblem = 10,
}
export interface CardFace {
    name: string;
    mana_cost: string | null;
    type_line: string;
    oracle_text: string | null;
    power: string | null;
    toughness: string | null;
}
export declare enum Format {
    standard = 0,
    modern = 1,
    legacy = 2,
    vintage = 3,
    commander = 4,
    pauper = 5,
    frontier = 6,
    penny = 7,
    duel = 8,
    "1v1" = 9,
    future = 10,
}
export declare enum Legality {
    legal = 0,
    not_legal = 1,
    restricted = 2,
    banned = 3,
}
export declare type Legalities = {
    [key in keyof typeof Format]: keyof typeof Legality;
};
export interface CardPart {
    id: string;
    name: string;
    uri: string;
}
export declare enum Rarity {
    common = 0,
    uncommon = 1,
    rare = 2,
    mythic = 3,
}
export declare const Frame: {
    [key in "1993" | "2003" | "2015" | "future"]: number;
};
export declare enum Border {
    black = 0,
    white = 1,
    silver = 2,
    gold = 3,
}
export interface ImageUris {
    small: string;
    normal: string;
    large: string;
    png: string;
}
export interface Card {
    name: string;
    mana_cost: string | null;
    cmc: number;
    type_line: string | null;
    oracle_text: string | null;
    power: string | null;
    toughness: string | null;
    loyalty: string | null;
    hand_modifier: string;
    life_modifier: string;
    colors: (keyof typeof Color)[];
    color_identity: (keyof typeof Color)[];
    layout: keyof typeof Layout;
    card_faces?: CardFace[];
    legalities: Legalities;
    reserved: boolean;
    id: string;
    multiverse_id: number | null;
    mtgo_id: number | null;
    set: string;
    set_name: string;
    collector_number: string | null;
    reprint: boolean;
    all_parts: CardPart[];
    rarity: keyof typeof Rarity;
    digital: boolean;
    watermark?: string;
    flavor_text?: string;
    artist: string;
    frame: keyof typeof Frame;
    border: keyof typeof Border;
    timeshifted: boolean;
    colorshifted: boolean;
    futureshifted: boolean;
    usd: number | null;
    eur: number | null;
    tix: number | null;
    scryfall_uri: string;
    image_uri: string | null;
    image_uris: ImageUris;
    related_uris: string[];
    purchase_uris: string[];
}
export declare enum SetType {
    core = 0,
    expansion = 1,
    masters = 2,
    masterpiece = 3,
    from_the_vault = 4,
    premium_deck = 5,
    duel_deck = 6,
    commander = 7,
    planechase = 8,
    conspiracy = 9,
    archenemy = 10,
    vanguard = 11,
    funny = 12,
    starter = 13,
    box = 14,
    promo = 15,
    token = 16,
}
export interface Set {
    code: string;
    name: string;
    released_at: string;
    block_code?: string;
    block?: string;
    parent_set_code?: string;
    card_count: number;
    digital: boolean;
    foil: boolean;
    icon_svg_uri: string;
    search_uri: string;
    set_type: keyof typeof SetType;
}
export interface CardSymbol {
    symbol: string;
    loose_variant: string;
    english: string;
    transposable: string;
    represents_mana: boolean;
    converted_mana_cost: number;
    colors: (keyof typeof Color)[];
    appears_in_mana_costs: boolean;
    funny: boolean;
}
export interface ScryError {
    status: number;
    code: string;
    type: string | null;
    details: string;
    warnings: string[] | null;
}
export interface ManaCost {
    cost: string;
    cmc: number;
    colors: (keyof typeof Color)[];
    colorless: boolean;
    monocolored: boolean;
    multicolored: boolean;
}
export interface HomepageLink {
    id: number;
    created_at: string;
    updated_at: string;
    priority: number;
    text: string;
    uri: string;
    badge: string;
}
export interface Ruling {
    source: string;
    published_at: string;
    comment: string;
}
